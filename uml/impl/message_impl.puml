@startuml

class MessageServer {
    + putMessage(Context ctx, byte[] content, int64 senderID, int64 chatID, int64 cid)
    + pullMessagesByIDs(Context ctx, int64 chatID, string[] messageIDs)
    + pullMessagesByPositions(Context ctx, int64 chatID, int startPos, int endPos)
    + deleteMessage(Context ctx, int64 chatID, int64 messageID)
    + collapseMessage(Context ctx, int64 chatID, int64 messageID)
    + readMessage(Context ctx, int64 chatID, int64[] messageIDs, int64 readerID)
    + pullMessageRead(Context ctx, int64[] messageIDs, int64 messageSender, int64 reader)
    + triggerSecretMessage(Context ctx, int chatID, int64[] messageIDs)
}

MessageServer --> MessageController
MessageServer --> PBPacket

class PBPacket {
    String cid
    String sid
    int32 command
    int8 status
    byte[] payload
}

class MessageController {
    + createMessage(Context ctx, MessageEntity msgEntity)
    + createSecretMessage(Context ctx, MessageEntity msgEntity)
    + updateMessage(Context ctx, MessageEntity msgEntity)
    + updateSecretMessage(Context ctx, MessageEntity msgEntity)

    + getChatMessagesByIDs(Context ctx, int64 chatID, string[] messageIDs)
    + getChatMessagesWithPosition(Context ctx, int64 chatID ,int startPos, int endPos)

    + readMessage(Context ctx, int64 chatID, int64 messageID, int64 readerID)
    + triggerSecretMessage(Context ctx, int chatID, int64[] messageIDs)
}

MessageController --> PushProcessor
MessageController --> FeedCardClient
MessageController --> aliyunOSS
MessageController --> ChatMessageRefDAO
MessageController --> MessageEntityDAO
MessageController --> MessageReadDAO
MessageController --> ChatMessageRefCacheAccessor
MessageController --> MessageEntityCacheAccessor
PushProcessor --> MessageReadCacheAccessor

class PushProcessor {
    + getPushUser2Devices(Context ctx, int64[] userIDs)
    + push(Context ctx, int64[] devices, byte[] payload, pushOpt... option)
}

PushProcessor --> FrontierClient
PushProcessor --> SessionClient
PushProcessor --> ChatClient

class SessionClient {
    + mGetDevicesByUserIDs(Context ctx, int64[] userIDs)
}

note "Thrift RPC" as n4
SessionClient ..n4
n4.. SessionServer

class SessionServer {
    + mGetDevicesByUserIDs(Context ctx, int64[] userIDs)
}

class ChatClient {
    + pullChatChatters(Context ctx, int64 chatID)
    + pullUserChatSettings(Context ctx, int64 userID, String[] chatID)
}

note "Thrift RPC" as n1
ChatClient ..n1
n1.. ChatServer

class ChatServer {
    + pullChat(Context ctx, int64 chatID)
    + pullChatChatters(Context ctx, int64 chatID)

    + pullUserChatSettings(Context ctx, int64 userID, String[] chatID)
}

class FeedCardClient {
    + putOrUpdateFeedCards(Context ctx, FeedCard[] cards)
}

note "Thrift RPC" as n2
FeedCardClient ..n2
n2.. FeedCardServer

class FeedCardServer {
    + putOrUpdateFeedCards(Context ctx, FeedCard[] cards)
}

class FrontierClient {
    + push(Context ctx, int64[] deviceIDs, byte[] payload)
}

note "Thrift RPC" as n3
FrontierClient ..n3
n3.. FrontierServer

class FrontierServer {
    + push(Context ctx, int64[] deviceIDs, byte[] payload)
}

class ChatMessageRefCacheAccessor {}
class MessageEntityCacheAccessor {}
class MessageReadCacheAccessor {}

ChatMessageRefCacheAccessor --> RedisCli
MessageEntityCacheAccessor --> RedisCli

class ChatMessageRefDAO {}
class MessageEntityDAO {}
class MessageReadDAO {}

ChatMessageRefDAO --> ChatMessageRef
MessageEntityDAO --> MessageEntity
MessageReadDAO --> MessageRead

class ChatMessageRef {}
class MessageEntity {}
class MessageRead {}

MessageEntity o--> PBMessage

class PBMessage {
    int64 id
    int64 chatID
    int64 ownerID
    byte[] content
    int8 messageType
    int position
    int8 status
    int64 cid
    int64 createTime
    int64[] atChatters

    + byte[] serialize(Entity entity)
    + Entity deserialize(byte[] bytes)
}

class aliyunOSS {
    + String store()
    + String get()
    + boolean update()
    + boolean delete()
}

class RedisCli {
    byte[] get(String key)
    boolean set(String key, String Value)
    boolean expire(String key, int seconds)
    boolean delete(String key)
}

@enduml