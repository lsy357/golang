@startuml

abstract class TTransport {}
abstract class TServerTransport {}
abstract class TProtocol {}
abstract class TProcessor {}
abstract class TServer {}
abstract class TServiceClient {}
class TThreadSelectorServer extends TServer {}

class TSocket extends TTransport {
    InputStream inputStream_
    OutputStream outputStream_

    void open()
    void close()
    int read(byte[] buf, int off, int len)
    void write(byte[] buf, int off, int len)
    void flush()
}

class TNonblockingServerSocket extends TServerTransport{
    - ServerSocketChannel serverSocketChannel
    - ServerSocket serverSocket_

    void listen()
    final TTransport accept()
    TNonblockingSocket acceptImpl()
}

class TBinaryProtocol extends TProtocol {
    TTransport trans_

    {abstract} void writeMessageBegin(TMessage msg)
    {abstract} void writeMessageEnd()
    {abstract} void writeByte()
    {abstract} void writeI64()

    {abstract} TMessage readMessageBegin()
    {abstract} void readMessageEnd()
}

class TBaseProcessor extends TProcessor {
    Map<String, ProcessFunction<I, ? extends TBase>> processMap

    void process(TProtocol in, TProtocol out)
}

class CustomizedServer extends TThreadSelectorServer {
    TServerTransport serverTransport_;
    TProcessorFactory processorFactory_;
    TTransportFactory inputTransportFactory_;
    TTransportFactory outputTransportFactory_;
    TProtocolFactory inputProtocolFactory_;
    TProtocolFactory outputProtocolFactory_;
    final TThreadedSelectorServer.Args args
    Stack<Middleware> mws

    void registerMiddleware(Middleware mw)
    void serve()
    void preRPCCallback(Context rpcContext, Meta methodMeta)
    void afterRPCCallback(Context rpcContext, Meta methodMeta)
    void stop()
}

TProtocol o-- TTransport
TProcessor o-- TProtocol

CustomizedServer o-- TServerTransport
CustomizedServer o-- TProtocol
CustomizedServer o-- TProcessor
CustomizedServer o-- Middleware

class CustomizedClient extends TServiceClient {
    SvrController svrFinder
    Stack<Middleware> mws

    void registerMiddleware(Middleware mw)
    void setTargetSvrAddr(TTransport trans_, String svrAddr)
    Object rpcMethod(Object... Params) // 调用接口方法
    void preRPCCallback(Context rpcContext, Meta methodMeta)
    void afterRPCCallback(Context rpcContext, Meta methodMeta)
    void sendMethodRequest()
    void recMethodResponse()
}

CustomizedClient o-- TProtocol
CustomizedClient o-- TProcessor
CustomizedClient o-- SvrController
CustomizedClient o-- Middleware

interface SvrController {
    String consulEndPoint
    String getTargetSvrAddr(String targetSvr)
    boolean registerSelf()
    void findAllSvr(List<String> svrs) throws CustomizedException
}

interface Middleware {
    void preRPCCallback(Context rpcContext, Meta methodMeta)
    void afterRPCCallback(Context rpcContext, Meta methodMeta)
}

@enduml