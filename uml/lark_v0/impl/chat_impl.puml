@startuml

class ChatServer {}
ChatServer --> ChatController

class ChatController {
    + putGroupChat(Context ctx, int64 ownerID, int64[] chatterIDs, String ChatName, int type)
    + putP2PChat(Context ctx, int64 ownerID, int64[] chatterIDs, int type)
    + pullGroupChats(Context ctx, int64[] chatIDs)
    + pullP2PChats(Context, int64[] chatIDs)
    + pullChatChatters(Context ctx, int64 chatID)
    + putChatChatters(Context ctx, int64 chatID, int64[] chatterIDs)
    + deleteChatChatter(Context ctx, int64 chatID, int64 chatterID)
    + pullUserChatSettings(Context ctx, int64 userID, int64[] chatID)
    + putOrUpdateUserChatSetting(Context ctx, UserChatSetting setting)
}

ChatController --> xxxDAO
ChatController --> RedisCli
ChatController --> FeedCardClient
ChatController --> KafkaProducer

class KafkaProducer {
    String topic
    + sendMsg(Context ctx, String topic, String key, byte[] msg)
}

class FeedCardClient {}

note "Thrift RPC" as n1
FeedCardClient ..n1
n1.. FeedCardServer

class FeedCardServer {
    + putOrUpdateFeedCards(Context ctx, FeedCard[] cards)
    + pullFeedCardsByIDs(Context ctx, int64 userID, int64[] chatIDs)
    + pullFeedCardsForClient(Context ctx, int64 userID, int cursor, int pullType, int count)
'    + deleteFeedCards(Context ctx, int64 userID, int64 chatID)
    + putShortcut(Context ctx, int64 userID, int64[] chatIDs)
    + pullShortcut(Context ctx, int64 userID)
    + DeleteShortcut(Context ctx, int64 userID, int64[] chatIDs)
}

FeedCardServer --> RedisCli
FeedCardServer --> FeedCardDAO
FeedCardServer --> ShortcutDAO

class RedisCli {
    byte[] get(String key)
    boolean set(String key, String Value)
'    boolean expire(String key, int seconds)
    boolean delete(String key)
}

@enduml